-- LocalScript GENERAL para todos los animales
local function setupAnimal(animal)
	-- Determinar tipo de animal por el evento remoto
	local event = animal:FindFirstChild("TigreEvent") or animal:FindFirstChild("ConejoEvent")
	if not event then
		return
	end

	local animalType = event.Name == "TigreEvent" and "Tigre" or "Conejo"

	local animationController = animal:FindFirstChild("AnimationController")
	if not animationController then
		warn("‚ùå No se encontr√≥ AnimationController en: " .. animal.Name)
		return
	end

	local animator = animationController:FindFirstChild("Animator")
	if not animator then
		animator = Instance.new("Animator")
		animator.Parent = animationController
	end

	local walkTrack, actionTrack

	-- Cargar animaci√≥n de Caminar
	local walkAnimation = animal:FindFirstChild("Caminar")
	if walkAnimation and walkAnimation:IsA("Animation") then
		local success, result = pcall(function()
			return animator:LoadAnimation(walkAnimation)
		end)

		if success then
			walkTrack = result
			walkTrack.Looped = true
			print("‚úÖ Animaci√≥n Caminar cargada para: " .. animal.Name .. " (" .. animalType .. ")")
		else
			warn("‚ùå Error cargando Caminar: " .. tostring(result))
		end
	end

	-- Cargar animaci√≥n de acci√≥n (Asustarse para tigre, Comer para conejo)
	local actionAnimationName = animalType == "Tigre" and "Asustarse" or "Comer"
	local actionAnimation = animal:FindFirstChild(actionAnimationName)
	if actionAnimation and actionAnimation:IsA("Animation") then
		local success, result = pcall(function()
			return animator:LoadAnimation(actionAnimation)
		end)

		if success then
			actionTrack = result
			actionTrack.Looped = false
			print("‚úÖ Animaci√≥n " .. actionAnimationName .. " cargada para: " .. animal.Name .. " (" .. animalType .. ")")
		else
			warn("‚ùå Error cargando " .. actionAnimationName .. ": " .. tostring(result))
		end
	end

	-- Escuchar eventos del servidor
	event.OnClientEvent:Connect(function(action, state)
		if action == "Caminar" then
			if walkTrack then
				if state then
					if actionTrack and actionTrack.IsPlaying then
						actionTrack:Stop()
						print("üêæ CLIENTE: Deteniendo " .. actionAnimationName .. ", iniciando Caminar")
					end
					if not walkTrack.IsPlaying then
						walkTrack:Play()
						print("üêæ CLIENTE: Animaci√≥n Caminar INICIADA - " .. animalType)
					end
				else
					if walkTrack.IsPlaying then
						walkTrack:Stop()
						print("üêæ CLIENTE: Animaci√≥n Caminar DETENIDA - " .. animalType)
					end
				end
			end

		elseif action == "Asustarse" or action == "Comer" then
			if actionTrack then
				if state then
					if walkTrack and walkTrack.IsPlaying then
						walkTrack:Stop()
						print("üêæ CLIENTE: Deteniendo Caminar, iniciando " .. actionAnimationName .. " - " .. animalType)
					end
					if not actionTrack.IsPlaying then
						actionTrack:Play()
						print("üêæ CLIENTE: Animaci√≥n " .. actionAnimationName .. " INICIADA - " .. animalType)
					end
				else
					if actionTrack.IsPlaying then
						actionTrack:Stop()
						print("üêæ CLIENTE: Animaci√≥n " .. actionAnimationName .. " DETENIDA - " .. animalType)
					end
				end
			end

		elseif action == "Apuntar" then
			print("üéØ CLIENTE: Evento Apuntar recibido - " .. animalType)
			-- Solo para conejos

		elseif action == "Comer" and animalType == "Conejo" then
			print("ü•ï CLIENTE: Evento Comer recibido - Conejo")
		end
	end)

	print("‚úÖ Sistema de animaciones configurado para: " .. animal.Name .. " (" .. animalType .. ")")
end

-- Conectar animales existentes
print("üîç Buscando animales existentes...")
for _, obj in ipairs(workspace:GetChildren()) do
	if obj:FindFirstChild("TigreEvent") or obj:FindFirstChild("ConejoEvent") then
		local animalType = obj:FindFirstChild("TigreEvent") and "Tigre" or "Conejo"
		print("üêæ Configurando " .. animalType .. ": " .. obj.Name)
		task.wait(1)
		setupAnimal(obj)
	end
end

-- Conectar nuevos animales
workspace.ChildAdded:Connect(function(child)
	if child:FindFirstChild("TigreEvent") or child:FindFirstChild("ConejoEvent") then
		local animalType = child:FindFirstChild("TigreEvent") and "Tigre" or "Conejo"
		print("üêæ Nuevo " .. animalType .. " detectado: " .. child.Name)
		task.wait(2)
		setupAnimal(child)
	end
end)

print("üéØ LocalScript GENERAL de animaciones iniciado correctamente")